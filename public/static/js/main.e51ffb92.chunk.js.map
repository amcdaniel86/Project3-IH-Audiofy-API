{"version":3,"sources":["Components/NewPlaylist.js","Components/PlaylistIndex.js","Components/SinglePlaylist.js","Components/NewAlbumlist.js","Components/AlbumlistIndex.js","Components/SingleAlbumlist.js","Services/UserService.js","Components/Signup.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["NewPlaylist","state","nameInput","timeInput","songsInput","updateInput","e","_this","setState","Object","defineProperty","target","id","value","createNewPlaylist","preventDefault","newName","newTime","Axios","post","concat","process","REACT_APP_API_URL","theName","theTime","withCredentials","then","responseFromOurApi","console","log","props","letTheIndexComponentKnowThatWeAddedAPlaylist","catch","err","react_default","a","createElement","onSubmit","this","onChange","Component","PlaylistIndex","allThePlaylists","fetchPlaylists","get","responseFromApi","data","reverse","showAllPlaylists","currentUser","filter","eachPlaylist","owner","_id","map","key","name","creator","time","Link","to","className","Components_NewPlaylist","SinglePlaylist","editing","editPlaylist","theActualPlaylist","toggleForm","showPlaylistDetails","onClick","src","alt","deleteProject","history","push","_this2","theID","match","params","playlistIGetBackFromApi","showProjectDetails","deletePlaylist","NewAlbumlist","albumsInput","createNewAlbumlist","letTheIndexComponentKnowThatWeAddedAnAlbumlist","AlbumlistIndex","allTheAlbumlists","fetchAlbumlists","showAllAlbumlists","eachAlbumlist","Components_NewAlbumlist","letTheIndexComponentKnowThatWeAddedAlbumlist","SingleAlbumlist","editAlbumlist","theActualAlbumlist","showAlbumlistDetails","albumlistIGetBackFromApi","deleteAlbumlist","UserService","classCallCheck","signup","username","password","service","response","login","loggedin","logout","create","baseURL","Signup","usernameInput","passwordInput","handleChange","handleFormSubmit","userFromDB","logTheUserIntoAppComponent","type","Login","loginUserService","App","loggedInUser","logInTheUser","userToLogin","showUser","fetchUser","theActualUserFromDB","_this3","class","Switch","Route","path","render","Components_PlaylistIndex","assign","component","Components_AlbumlistIndex","Components_Signup","Components_Login","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e51ffb92.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\n// import PlaylistIndex from './PlaylistIndex';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nclass NewPlaylist extends Component {\r\n\r\n    state = {\r\n      nameInput: '',\r\n      timeInput: '',\r\n      songsInput: ''\r\n    }\r\n\r\n\r\n    updateInput = (e) => {\r\n\r\n      this.setState({[e.target.id]: e.target.value})\r\n      // e.target is the thing that just got updated.\r\n      // this.state[e.target.id] = e.target.value: same as first one.\r\n    }\r\n\r\n\r\n    createNewPlaylist = (e) => {\r\n      e.preventDefault();\r\n      // e.prevent prevents refreshing from happening, to help React work properly.\r\n      // step 1: Grab data from state and make a copy of it so you can manipulate the data in functions within this function.\r\n        const newName = this.state.nameInput;\r\n        const newTime = this.state.timeInput;\r\n        // grab values from the DOM\r\n        // ??not sure how to pull in req.body from api.\r\n        \r\n// the below Axios.post route, you must include withCredentials as an object because the route we are posting to, uses req.user which by default is protected by express.\r\n      Axios.post(`${process.env.REACT_APP_API_URL}/playlists/add-new`, {theName: newName, theTime: newTime }, {withCredentials: true})\r\n      // ??not sure how to pull in req.body from api.\r\n      // 2nd argument must be an object above, after the path address http...\r\n      .then((responseFromOurApi) => {\r\n        // .then here, communicates to the api, make a new instance of the Playlist  model in the backend from the api post add-new route.\r\n          console.log('success', responseFromOurApi)\r\n          this.props.letTheIndexComponentKnowThatWeAddedAPlaylist();\r\n          // after we send the axios request to the api, we call the function in the parent component - (PlaylistIndex in this case) to make that Component go and get allThePlaylists again, and now the list will have the new Playlist that was just created and added.\r\n      })\r\n      .catch((err) => {\r\n        console.log('error creating playlist sorry', err)\r\n      })\r\n    }\r\n\r\n\r\nrender() {\r\n  return(\r\n    <div>\r\n\r\n      <h2> Add New Playlist</h2>\r\n        <form onSubmit = {this.createNewPlaylist}>\r\n        \r\n          <label>Name</label>        \r\n          <input value={this.state.nameInput} id=\"nameInput\" onChange={this.updateInput} />\r\n          {/* for a form, the input must have value={this.state.labelInput} labelInput is from key at top of component. */}\r\n          \r\n          <label>Time</label>        \r\n          <input value={this.state.timeInput} id=\"timeInput\" onChange={this.updateInput} />\r\n\r\n          <button>Save</button>\r\n\r\n        </form>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default NewPlaylist;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport NewPlaylist from './NewPlaylist';\r\n\r\n\r\nclass PlaylistIndex extends Component {\r\n\r\n    state = {\r\n        allThePlaylists: []\r\n    }\r\n    // empty array is preferred.\r\n\r\n // remember: first time the render function runs, the state will look exactly like it is set it up in the constructor above. (an empty array)\r\n    // since we are doing this.state.allThePlaylists.map, == an empty array in the beginnning is a clever trick because first time the component renders, the state will have an empty array, and will loop through the empty array and show nothing.\r\n    // you will not see it though because it happens quickly.\r\n    // and if we don't start our state with equalling our this.state.allThePlaylists to an empty array, it will throw an error, because we are trying to do .map on NULL which is not allowed or possible.\r\n\r\n    // componentWillMount runs everytime the Component is about to be rendered on the page. in this function, we we will establish an Axios request to our API route through the fetchPlaylists() function.\r\n    // the response we get back should be equal to an object with a .data key inside of it, .data will be equal to all the playlist json's we get from the API.\r\n\r\n    componentWillMount() {\r\n      this.fetchPlaylists();\r\n    }\r\n    // another way to see this lifecyle method, is WillMount happens everytime the transition from the component not being there to appearing, happens. Within that time, this method will run, pulling the fetchPlaylists() with it.\r\n    // kind of like changing views in backend. each time a component shows up, if it is to stay on the page\r\n\r\n    fetchPlaylists = () => {\r\n        // function that can be called from other functions in the component.\r\n      Axios.get(`${process.env.REACT_APP_API_URL}/playlists`)\r\n      .then((responseFromApi) => {\r\n        // responseFromApi is the array of objects from  the Api.\r\n\r\n        // error showing .map, .filter, forEach is not a function, that means not an array is being targeted, probably missing something like .data.\r\n\r\n        // once we have all the playlists, we setState so the state will then have all the Playlists in it, and able to show them on the page.\r\n        this.setState({allThePlaylists: responseFromApi.data.reverse()})\r\n        // .reverse is so we see the newest playlists at the top of the page. .data would show oldest playlists at the top without putting reverse.\r\n      })\r\n      .catch((err) => {\r\n\r\n      })\r\n    }\r\n\r\n    // componentWillReceiveProps(){\r\n      // want something when the props change, \r\n  // } not applicable here\r\n\r\n\r\n// because componentWillMount will still allow the component to initialize before running, we can protect ourselves by putting an if statement before anytime we want to loop something that is in our state.\r\n    showAllPlaylists = () => {\r\n      if(this.state.allThePlaylists && this.props.currentUser) {\r\n        // this above if statement protects the state of the page by verifying as long as the user is logged in and allThePlaylists have ran as well, then YES, perform the showAllPlaylists function.\r\n        \r\n        // including .state isn't necessary in a functional component because there is no state in functional components, for above and below.\r\n          const myPlaylists = this.state.allThePlaylists.filter((eachPlaylist) => {\r\n              return eachPlaylist.owner === this.props.currentUser._id\r\n            // .owner??????\r\n          })\r\n          // i.e. once all the playlists are in the state, THEN we can map through them as a loop.\r\n          return myPlaylists.map((eachPlaylist) => {\r\n            return(\r\n              <div key = {eachPlaylist._id}>\r\n              {/* key goes in this div, on main component. */}\r\n                <h3>{eachPlaylist.name}</h3>\r\n                <h4>{eachPlaylist.creator}</h4>\r\n                <h6>{eachPlaylist.time}</h6>\r\n                <Link to = {'/playlist/' + eachPlaylist._id} >See Details </Link>\r\n              \r\n              </div>\r\n            )\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // render function runs once, when the component's state is equal to the default state from the top right under extends Component. if the default state is null, then function .map will not work. if the default state is [], an empty array, like mentioned earlier, then function .map will work. along with other functions, like .filter, .reduce etc. \r\n\r\n\r\n\r\n    render() {\r\n      // console.log('-=-=-=-=-=-=-=-=', this.state); a test\r\n      return(\r\n        <div>\r\n          {/* Now here, is where we have to show all the playlists on the page, this happens in the render function. Logic is above in functions, 1st half or so of component, and then in render is when what the visual will end up becoming depending on the rules of state and the above logic. */}\r\n          <h1>Playlist Index</h1>\r\n\r\n          <div className=\"list-of-playlists-container\">\r\n            {this.showAllPlaylists()}\r\n          </div>\r\n          \r\n          <div className=\"add-new-component-container\">\r\n            <NewPlaylist letTheIndexComponentKnowThatWeAddedAPlaylist = {this.fetchPlaylists} />\r\n            {/* we pass in this function in the PlaylistIndex Component, so after we add a new playlist in the NewPlaylist Component, the NewP Component, will be able to tell the PlaylistIndex Component to check for any new playlists that we're added since the last render of PlaylistIndex.*/}\r\n          </div>\r\n          \r\n          \r\n          \r\n          \r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default PlaylistIndex;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass SinglePlaylist extends Component {\r\n\r\n// what we know now.. is the id of a project we want to show on this page.\r\n\r\n\r\n  state = {\r\n    nameInput: '',\r\n    timeInput: '',\r\n    editing: false\r\n  }\r\n// do I put songs array in state?\r\n\r\n  componentWillMount() {\r\n      const theID = this.props.match.params.id;\r\n      Axios.get(`${process.env.REACT_APP_API_URL}/playlist-details/${theID}`)\r\n      .then((playlistIGetBackFromApi) => {\r\n        // console.log('----------=-=-=-==-=-=-=-------', playlistIGetBackFromApi) test\r\n\r\n        this.setState({theActualPlaylist: playlistIGetBackFromApi.data,\r\n              nameInput: playlistIGetBackFromApi.data.name,\r\n              timeInput: playlistIGetBackFromApi.data.time\r\n          })\r\n\r\n      })\r\n     .catch(() => {\r\n\r\n      })\r\n\r\n    }\r\n\r\n        updateInput = (e) => {\r\n          this.setState({\r\n            [e.target.id]: e.target.value\r\n          })\r\n          //e.target is the thing that just got updated.// this.state[e.target.id] = e.target.value\r\n          // fancy way of saying first way\r\n        }\r\n\r\n\r\n        editPlaylist = (e) => {\r\n          e.preventDefault();\r\n          // above prevents refreshing, works way React supposed to work.\r\n          Axios.post(`${process.env.REACT_APP_API_URL}/playlist-edit/${ this.state.theActualPlaylist._id}`,\r\n          // grabs the id of the current project that we are looking at, at this point in time in the app flow.\r\n          {theName: this.state.nameInput, theTime: this.state.timeInput})\r\n          // including .state means we are able to change the default state of the component, thus after editing is complete.. we need to end the process by returning the state, below with setState, back to editing: false, so the form goes away and the user can continue using the site.\r\n          .then(() => {\r\n              this.setState({editing: false});\r\n              // after submitting the form and the axios request is complete, we set this.state.editing back to false so the form disappears and the app works cleanly, and looks fancy.\r\n          })\r\n          .catch(() => {\r\n\r\n          })\r\n       }\r\n\r\n\r\n        toggleForm  = () => {\r\n          this.setState({editing: true})\r\n        }\r\n// simple function to allow editing of the state to occur, and for the user to edit json objects from the database/api.\r\n\r\n\r\n// referenced below on component's return area in curly braces. better that way when using if statements and loops.\r\n        showPlaylistDetails = () => {\r\n            if(this.state.theActualPlaylist) {\r\n              // notice multiple if statements for this function. If state is on anActualPlaylist AND if editing is true at the time, then yes, return a form the user can edit details in.\r\n              \r\n              if(this.state.editing) {\r\n                // if state.editing is set to true, then a form will appear.\r\n\r\n                return(\r\n\r\n                  <form onSubmit={this.editPlaylist}>\r\n\r\n                    <input className=\"input\" value={this.state.nameInput} onChange={this.updateInput} id=\"nameInput\" />\r\n\r\n                    <input className=\"input\" value={this.state.timeInput} onChange={this.updateInput} id=\"timeInput\" />\r\n\r\n                    <button>Submit changes</button>\r\n                  \r\n                  \r\n                  </form>\r\n                  // with forms, ALWAYS need a state at the top of the component to track the form. no forms on functional components.\r\n                )\r\n              } else {\r\n                // by default, this.state.editing is set to false, so when page first loads, the form will not show. User will see the return area that is below. just this info, NOT the form.\r\n                return(\r\n                  <div>\r\n                    <span>\r\n                      {this.state.nameInput}\r\n                    </span>\r\n\r\n                    <span>\r\n                      {this.state.timeInput}\r\n                    </span>\r\n                  {/* we can put a small image of a pen here, and add an onClick function to the image.\r\n                  the onClick function will change this.state.editing to true, so the form will then appear. */}\r\n                    <img onClick={this.toggleForm} className=\"pen-pic\" src=\"https:aldksfjdaslkfj\" alt=\"pic\" />\r\n\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n        }\r\n\r\n\r\n            deleteProject = () => {\r\n              Axios.post(`${process.env.REACT_APP_API_URL}/playlist-delete/${ this.state.theActualPlaylist._id}`, {})\r\n              .then(() => {\r\n                this.props.history.push('/playlist-index');\r\n                // redirect user over to playlist-index after deletion occurs.\r\n              })\r\n              .catch(() => {\r\n\r\n              })\r\n         }\r\n\r\n         render() {\r\n          //  console.log(this.props) test\r\n          //  console.log(this.state) test\r\n          return(\r\n            <div>\r\n              <h1> Playlist Details Page</h1>\r\n                {this.showProjectDetails()}\r\n                {/* notice this function controls how whether a form or info is shown on the page of the component when the user is on this component. and it shows up in the render part of the component. Thus, any way you want to show different things on components in different ways, the way to do it is to create a function for the part, and then after the function is decided and logic makes sense.. then call the function in the render of the component. */}\r\n\r\n                    <div>\r\n                      <button onClick={this.deletePlaylist} className=\"delete\">Delete Playlist</button>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n          )\r\n         }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\nexport default SinglePlaylist;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\n// import AlbumlistIndex from './AlbumlistIndex';\r\n// import Signup from '/Signup';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nclass NewAlbumlist extends Component {\r\n\r\n    state = {\r\n      nameInput: '',\r\n      timeInput: '',\r\n      albumsInput: ''\r\n    }\r\n\r\n\r\n    updateInput = (e) => {\r\n\r\n      this.setState({[e.target.id]: e.target.value})\r\n      // e.target is the thing that just got updated.\r\n      // this.state[e.target.id] = e.target.value: same as first one.\r\n    }\r\n\r\n\r\n    createNewAlbumlist = (e) => {\r\n      e.preventDefault();\r\n      // e.prevent prevents refreshing from happening, to help React work properly.\r\n      // step 1: Grab data from state and make a copy of it so you can manipulate the data in functions within this function.\r\n        const newName = this.state.nameInput;\r\n        const newTime = this.state.timeInput;\r\n        // grab values from the DOM\r\n        // ??not sure how to pull in req.body from api.\r\n        \r\n// the below Axios.post route, you must include withCredentials as an object because the route we are posting to, uses req.user which by default is protected by express.\r\n      Axios.post(`${process.env.REACT_APP_API_URL}/albumlists/add-new`, {theName: newName, theTime: newTime }, {withCredentials: true})\r\n      // ??not sure how to pull in req.body from api.\r\n      // 2nd argument must be an object above, after the path address http...\r\n      .then((responseFromOurApi) => {\r\n        // .then here, communicates to the api, make a new instance of the Albumlist  model in the backend from the api post add-new route.\r\n          console.log('success', responseFromOurApi)\r\n          this.props.letTheIndexComponentKnowThatWeAddedAnAlbumlist();\r\n          // after we send the axios request to the api, we call the function in the parent component - (AlbumlistIndex in this case) to make that Component go and get allTheAlbumlists again, and now the list will have the new Albumlist that was just created and added.\r\n      })\r\n      .catch((err) => {\r\n        console.log('error creating Albumlist sorry', err)\r\n      })\r\n    }\r\n\r\n\r\nrender() {\r\n  return(\r\n    <div>\r\n\r\n      <h2> Add New Albumlist</h2>\r\n        <form onSubmit = {this.createNewAlbumlist}>\r\n        \r\n          <label>Name</label>        \r\n          <input value={this.state.nameInput} id=\"nameInput\" onChange={this.updateInput} />\r\n          {/* for a form, the input must have value={this.state.labelInput} labelInput is from key at top of component. */}\r\n          \r\n          <label>Time</label>        \r\n          <input value={this.state.timeInput} id=\"timeInput\" onChange={this.updateInput} />\r\n\r\n          <button>Save</button>\r\n\r\n\r\n        </form>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default NewAlbumlist;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport NewAlbumlist from './NewAlbumlist';\r\n\r\n\r\nclass AlbumlistIndex extends Component {\r\n\r\n    state = {\r\n        allTheAlbumlists: []\r\n    }\r\n    // empty array is preferred.\r\n\r\n // remember: first time the render function runs, the state will look exactly like it is set it up in the constructor above. (an empty array)\r\n    // since we are doing this.state.allTheAlbumlists.map, == an empty array in the beginnning is a clever trick because first time the component renders, the state will have an empty array, and will loop through the empty array and show nothing.\r\n    // you will not see it though because it happens quickly.\r\n    // and if we don't start our state with equalling our this.state.allTheAlbumlists to an empty array, it will throw an error, because we are trying to do .map on NULL which is not allowed or possible.\r\n\r\n    // componentWillMount runs everytime the Component is about to be rendered on the page. in this function, we we will establish an Axios request to our API route through the fetchAlbumlists() function.\r\n    // the response we get back should be equal to an object with a .data key inside of it, .data will be equal to all the Albumlist json's we get from the API.\r\n\r\n    componentWillMount() {\r\n      this.fetchAlbumlists();\r\n    }\r\n    // another way to see this lifecyle method, is WillMount happens everytime the transition from the component not being there to appearing, happens. Within that time, this method will run, pulling the fetchAlbumlists() with it.\r\n    // kind of like changing views in backend. each time a component shows up, if it is to stay on the page\r\n\r\n    fetchAlbumlists = () => {\r\n        // function that can be called from other functions in the component.\r\n      Axios.get(`${process.env.REACT_APP_API_URL}/albumlists`)\r\n      .then((responseFromApi) => {\r\n        // responseFromApi is the array of objects from  the Api.\r\n\r\n        // error showing .map, .filter, forEach is not a function, that means not an array is being targeted, probably missing something like .data.\r\n\r\n        // once we have all the Albumlists, we setState so the state will then have all the Albumlists in it, and able to show them on the page.\r\n        this.setState({allTheAlbumlists: responseFromApi.data.reverse()})\r\n        // .reverse is so we see the newest Albumlists at the top of the page. .data would show oldest Albumlists at the top without putting reverse.\r\n      })\r\n      .catch((err) => {\r\n\r\n      })\r\n    }\r\n\r\n    // componentWillReceiveProps(){\r\n      // want something when the props change, \r\n  // } not applicable here\r\n\r\n\r\n// because componentWillMount will still allow the component to initialize before running, we can protect ourselves by putting an if statement before anytime we want to loop something that is in our state.\r\n    showAllAlbumlists = () => {\r\n      if(this.state.allTheAlbumlists && this.props.currentUser) {\r\n        // this above if statement protects the state of the page by verifying as long as the user is logged in and allTheAlbumlists have ran as well, then YES, perform the showAllAlbumlists function.\r\n        \r\n        // including .state isn't necessary in a functional component because there is no state in functional components, for above and below.\r\n          const myAlbumlists = this.state.allTheAlbumlists.filter((eachAlbumlist) => {\r\n              return eachAlbumlist.owner === this.props.currentUser._id\r\n            // .owner??????\r\n          })\r\n          // i.e. once all the Albumlists are in the state, THEN we can map through them as a loop.\r\n          return myAlbumlists.map((eachAlbumlist) => {\r\n            return(\r\n              <div key = {eachAlbumlist._id}>\r\n              {/* key goes in this div, on main component. */}\r\n                <h3>{eachAlbumlist.name}</h3>\r\n                <h4>{eachAlbumlist.creator}</h4>\r\n                <h6>{eachAlbumlist.time}</h6>\r\n                <Link to = {'/albumlist/' + eachAlbumlist._id} >See Details </Link>\r\n              \r\n            \r\n\r\n              </div>\r\n            )\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // render function runs once, when the component's state is equal to the default state from the top right under extends Component. if the default state is null, then function .map will not work. if the default state is [], an empty array, like mentioned earlier, then function .map will work. along with other functions, like .filter, .reduce etc. \r\n\r\n\r\n\r\n    render() {\r\n      // console.log('-=-=-=-=-=-=-=-=', this.state); a test\r\n      return(\r\n        <div>\r\n          {/* Now here, is where we have to show all the Albumlists on the page, this happens in the render function. Logic is above in functions, 1st half or so of component, and then in render is when what the visual will end up becoming depending on the rules of state and the above logic. */}\r\n          <h1>Albumlist Index</h1>\r\n\r\n          <div className=\"list-of-albumlists-container\">\r\n            {this.showAllAlbumlists()}\r\n          </div>\r\n          \r\n          <div className=\"add-new-component-container\">\r\n            <NewAlbumlist letTheIndexComponentKnowThatWeAddedAlbumlist = {this.fetchAlbumlists} />\r\n            {/* we pass in this function in the AlbumlistIndex Component, so after we add a new Albumlist in the NewAlbumlist Component, the NewP Component, will be able to tell the AlbumlistIndex Component to check for any new Albumlists that we're added since the last render of AlbumlistIndex.*/}\r\n          </div>\r\n          \r\n          \r\n          \r\n          \r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default AlbumlistIndex;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass SingleAlbumlist extends Component {\r\n\r\n// what we know now.. is the id of a Playlist we want to show on this page.\r\n\r\n\r\n  state = {\r\n    nameInput: '',\r\n    timeInput: '',\r\n    editing: false\r\n  }\r\n// do I put albums array in state?\r\n\r\n  componentWillMount() {\r\n      const theID = this.props.match.params.id;\r\n      Axios.get(`${process.env.REACT_APP_API_URL}/albumlist-details/${theID}`)\r\n      .then((albumlistIGetBackFromApi) => {\r\n        // console.log('----------=-=-=-==-=-=-=-------', albumlistIGetBackFromApi) test\r\n\r\n        this.setState({theActualAlbumlist: albumlistIGetBackFromApi.data,\r\n              nameInput: albumlistIGetBackFromApi.data.name,\r\n              timeInput: albumlistIGetBackFromApi.data.time\r\n          })\r\n\r\n      })\r\n     .catch(() => {\r\n\r\n      })\r\n\r\n    }\r\n\r\n        updateInput = (e) => {\r\n          this.setState({\r\n            [e.target.id]: e.target.value\r\n          })\r\n          //e.target is the thing that just got updated.// this.state[e.target.id] = e.target.value\r\n          // fancy way of saying first way\r\n        }\r\n\r\n\r\n        editAlbumlist = (e) => {\r\n          e.preventDefault();\r\n          // above prevents refreshing, works way React supposed to work.\r\n          Axios.post      (`${process.env.REACT_APP_API_URL}/albumlist-edit/${ this.state.theActualAlbumlist._id}`,\r\n          // grabs the id of the current Playlist that we are looking at, at this point in time in the app flow.\r\n          {theName: this.state.nameInput, theTime: this.state.timeInput})\r\n          // including .state means we are able to change the default state of the component, thus after editing is complete.. we need to end the process by returning the state, below with setState, back to editing: false, so the form goes away and the user can continue using the site.\r\n          .then(() => {\r\n              this.setState({editing: false});\r\n              // after submitting the form and the axios request is complete, we set this.state.editing back to false so the form disappears and the app works cleanly, and looks fancy.\r\n          })\r\n          .catch(() => {\r\n\r\n          })\r\n       }\r\n\r\n\r\n        toggleForm  = () => {\r\n          this.setState({editing: true})\r\n        }\r\n// simple function to allow editing of the state to occur, and for the user to edit json objects from the database/api.\r\n\r\n\r\n// referenced below on component's return area in curly braces. better that way when using if statements and loops.\r\n        showAlbumlistDetails = () => {\r\n            if(this.state.theActualAlbumlist) {\r\n              // notice multiple if statements for this function. If state is on anActualAlbumlist AND if editing is true at the time, then yes, return a form the user can edit details in.\r\n              \r\n              if(this.state.editing) {\r\n                // if state.editing is set to true, then a form will appear.\r\n\r\n                return(\r\n\r\n                  <form onSubmit={this.editAlbumlist}>\r\n\r\n                    <input className=\"input\" value={this.state.nameInput} onChange={this.updateInput} id=\"nameInput\" />\r\n\r\n                    <input className=\"input\" value={this.state.timeInput} onChange={this.updateInput} id=\"timeInput\" />\r\n\r\n                    <button>Submit changes</button>\r\n                  \r\n                  \r\n                  </form>\r\n                  // with forms, ALWAYS need a state at the top of the component to track the form. no forms on functional components.\r\n                )\r\n              } else {\r\n                // by default, this.state.editing is set to false, so when page first loads, the form will not show. User will see the return area that is below. just this info, NOT the form.\r\n                return(\r\n                  <div>\r\n                    <span>\r\n                      {this.state.nameInput}\r\n                    </span>\r\n\r\n                    <span>\r\n                      {this.state.timeInput}\r\n                    </span>\r\n                  {/* we can put a small image of a pen here, and add an onClick function to the image.\r\n                  the onClick function will change this.state.editing to true, so the form will then appear. */}\r\n                    <img onClick={this.toggleForm} className=\"pen-pic\" src=\"https:aldksfjdaslkfj\" alt=\"penpic\" />\r\n\r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n        }\r\n\r\n\r\n            deletePlaylist = () => {\r\n              Axios.post(`${process.env.REACT_APP_API_URL}/albumlist-delete/${ this.state.theActualAlbumlist._id}`, {})\r\n              .then(() => {\r\n                this.props.history.push('/albumlist-index');\r\n                // redirect user over to albumlist-index after deletion occurs.\r\n              })\r\n              .catch(() => {\r\n\r\n              })\r\n         }\r\n\r\n         render() {\r\n          //  console.log(this.props) test\r\n          //  console.log(this.state) test\r\n          return(\r\n            <div>\r\n              <h1> Albumlist Details Page</h1>\r\n                {this.showPlaylistDetails()}\r\n                {/* notice this function controls how whether a form or info is shown on the page of the component when the user is on this component. and it shows up in the render part of the component. Thus, any way you want to show different things on components in different ways, the way to do it is to create a function for the part, and then after the function is decided and logic makes sense.. then call the function in the render of the component. */}\r\n\r\n                    <div>\r\n                      <button onClick={this.deleteAlbumlist} className=\"delete\">Delete Albumlist</button>\r\n                    </div>\r\n\r\n\r\n            </div>\r\n          )\r\n         }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\nexport default SingleAlbumlist;","import Axios from 'axios';\r\n\r\n\r\n\r\nclass UserService {\r\n// NOT A COMPONENT, A CLASS, thus requires a constructor()\r\n\r\n\r\n  constructor() {\r\n    let service = Axios.create({\r\n      baseURL: `${process.env.REACT_APP_API_URL}`,\r\n      withCredentials: true\r\n    })\r\n    // Axios.create allows you to preconfigure the url, and headers, of any axios requests.\r\n// what happens is when we make an axios request with that object, we pass in a url from the api, and that back end api url gets added onto the end of the baseURL (localhost5000) we created the axios object with.\r\n// Axios.create assumes that 'http: will be the beginning of every axios request we make.\r\n\r\n    this.service = service;\r\n  }\r\n\r\n    signup = (username, password) => {\r\n        return this.service.post('/signup', {username, password})\r\n          .then(response => response.data)\r\n    }\r\n\r\n    login = (username, password) => {\r\n        return this.service.post('/login', {username, password})\r\n          .then(response => response.data)\r\n    }\r\n\r\n    loggedin = () => {\r\n        return this.service.get('/loggedin')\r\n        // why this route a get, not a post?\r\n        // no object in 2nd arg here, why?\r\n        // because get route doesn't send data, post routes require an object because a post route sends something.\r\n          .then(response => response.data)\r\n    }\r\n\r\n    logout = () => {\r\n        return this.service.post('/logout', {})\r\n          .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\nexport default UserService;\r\n\r\n// how should I think of this page? like the passport file? it's just necessary?","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\nimport UserService from '../Services/UserService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Signup extends Component {\r\n\r\n    state = { usernameInput: '', passwordInput: '' };\r\n    service = new UserService();\r\n    // a new UserService is created because UserService is a class. so service, makes a new instance of UserService as the default state for the Signup component. makes sense\r\n\r\n\r\n    // handleChange() and handleSubmit() are added here.\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n\r\n    \r\n    handleFormSubmit = (e) => {\r\n      e.preventDefault();\r\n      // you could do axios.post(`${process.env.REACT_APP_API_URL}/signup`, {username: this.state.usernameInput, password: this.state.passwordInput}, {withCredentials: true})\r\n      this.service.signup(this.state.usernameInput, this.state.passwordInput)\r\n        .then((userFromDB) => {\r\n            console.log('-=-=-=-=-=-=-=-=', userFromDB)\r\n            this.props.logTheUserIntoAppComponent(userFromDB)\r\n            // this.props. above, we wait for the API to give us the user object back after logging in.\r\n            // after logging in, we then pass the user object back to  the App component.\r\n            this.setState({usernameInput: '', passwordInput: ''})\r\n\r\n            this.props.history.push('/playlist-index');\r\n            // since redirect and views are NEVER used in react, above line sends the user back to the /playlist-index page once .then  is carried out.\r\n        })\r\n        .catch((err) => {\r\n            console.log('error with submitting', err)\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n      return(\r\n\r\n        <div>\r\n            <form onSubmit = {this.handleFormSubmit}>\r\n\r\n              <label>Username:</label>\r\n              <input type=\"text\" name=\"usernameInput\" value={this.state.usernameInput} onChange={ e => this.handleChange(e)} />\r\n              {/* what happens here: in the render section, is where based on logic in top half of component, the component will then render html onto the page (DOM). here the username input box is filled from usernameInput from the state section. and when onChange runs, handleChange function runs. */}\r\n              \r\n              \r\n              <label>Password:</label>\r\n              <input name=\"passwordInput\" value={this.state.passwordInput} onChange={ e => this.handleChange(e)} />\r\n              {/* what happens here: in the render section, is where based on logic in top half of component, the component will then render html onto the page (DOM). here the password input box is filled from passwordInput from the state section. and when onChange runs, handleChange function runs. */}\r\n            \r\n              <input type=\"submit\" value=\"Signup\" />\r\n            \r\n            \r\n            </form>\r\n\r\n            <p>Already have account?\r\n                {/* <Link to={'/'}>Login</Link> */}\r\n                {/* why is above commented? */}\r\n            </p>\r\n\r\n\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Signup;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Axios from 'axios';\r\nimport UserService from '../Services/UserService';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    state = { usernameInput: '', passwordInput: '' };\r\n    loginUserService = new UserService();\r\n     // a new UserService is created because UserService is a class. so service, makes a new instance of UserService as the default state for the Signup component. makes sense\r\n\r\n\r\n    handleChange = (e) => {\r\n      this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n\r\n\r\n    handleFormSubmit = (e) => {\r\n      e.preventDefault();\r\n      // you could do Axios.post(`${process.env.REACT_APP_API_URL}/login`, {username: this.state.usernameInput, password: this.state.passwordInput}, {withCredentials: true})\r\n      this.loginUserService.login(this.state.usernameInput, this.state.passwordInput)\r\n        .then((userFromDB) => {\r\n          // here, we wait for the API to give us the user object back after logging in.\r\n          this.setState({usernameInput: '', passwordInput: ''})\r\n          // then we pass that user object grabbed from the API, and put it into the App component below.\r\n          this.props.logTheUserIntoAppComponent(userFromDB)\r\n          // above we are getting the User object from the db, and we are setting AppComponent.state.loggedInUser equal to it.\r\n\r\n          this.props.history.push('/playlist-index');\r\n          // React-Redirect to specified page.\r\n\r\n        })\r\n        .catch((err) => {\r\n          console.log('error submitting form', err)\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n      return(\r\n        <div>\r\n\r\n          <form onSubmit = {this.handleFormSubmit}>\r\n\r\n            <label>Username:</label>          \r\n            <input type=\"text\" name=\"usernameInput\" value={this.state.usernameInput} onChange={ e => this.handleChange(e)} />\r\n            \r\n            \r\n            <label>Password:</label>          \r\n            <input name=\"passwordInput\" value={this.state.passwordInput} onChange={ e => this.handleChange(e)} />\r\n\r\n            <input type=\"submit\" value=\"Login\" />\r\n\r\n          </form>\r\n\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n// this.props.history.push is the redirect version for React. The React version of express' res.redirect.","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nimport PlaylistIndex from './Components/PlaylistIndex';\nimport SinglePlaylist from './Components/SinglePlaylist';\n\nimport AlbumlistIndex from './Components/AlbumlistIndex';\nimport SingleAlbumlist from './Components/SingleAlbumlist';\n\nimport Signup from './Components/Signup';\nimport Login from './Components/Login';\nimport UserService from './Services/UserService';\n\n\nclass App extends Component {\n\n    state = {\n      loggedInUser: null\n    }\n\n    service = new UserService();\n\n    // component Mount Section\n\n    componentDidMount(props) {\n      this.fetchUser()\n      // this, allows componentDidMount to grab the fetchUser function below because it is a part of class App at top of component.\n    }\n\n\n    fetchUser() {\n      // if ( this.state.loggedInUser === null ) {\n        this.service.loggedin()\n          .then(theActualUserFromDB => {\n            this.setState({\n              // when fetchUser runs, if logged in, then change the state of App component to the current loggedInUser from the database.\n              loggedInUser: theActualUserFromDB\n\n              })\n          })\n          .catch( err => {\n            console.log(' catch getting hit ')\n            this.setState({\n              // when fetchUser runs, but error shows, then change the state of App component to false, and do not allow log in user access.\n              loggedInUser: false\n            })\n          })\n      // }\n    }\n\n      logInTheUser = (userToLogin) => {\n\n        this.setState({loggedInUser: userToLogin})\n      }\n\n      showUser = () => {\n        if(this.state.loggedInUser) {\n          // if the state of App component shows user as logged in.. then show the below div to welcome them.\n          return(\n            <div>Welcome, {this.state.loggedInUser.username}</div>\n          )\n        }\n      }\n\n      logout = () => {\n        this.service.logout().then(() => {\n          // WHY IN THE WORLD IS .THEN CONNECTED TO THIS HERE???\n          this.setState({ loggedInUser: null });\n        })\n      }\n\n\n  \n  render() {\n    // {this.fetchUser()}\n    console.log(this.state)\n    // why this.state here? to test?\n\n\n    return (\n        \n  <div>\n          {this.showUser()}\n{/* // this works above because showUser uses an arrow function. */}\n        <h1>The Index Main Page</h1>\n\n        <nav class=\"nav-bar\">\n          <Link to=\"/playlist-index\">All Playlists</Link>\n          <Link to=\"/albumlist-index\">All Albumlists</Link>\n          <Link to=\"/signup\">Sign Up For Account</Link>\n          <Link to=\"/login\">Login to Your Account</Link>\n          <button onClick = {this.logout} >Logout</button>\n        </nav>\n\n{/* // if you need to pass props to a component you are rendering inside a route, you have to use render as opposed to component = {} */}\n{/* // in addition, if you do above, (using render), then you must pass in {...this.props} so you're able to use this.props.history, this.props.history, this.props.match.params and the other this.props information from the DOM. */}\n{/* // if you don't need to send .props like for an :id situation, then compenent = is sufficient, render isn't needed. */}\n\n{/* // ROUTES IN REACT ARE IF STATEMENTS, OR SWITCH IN THIS CASE. */}\n        <Switch>\n              {/* ALL PLAYLISTS ROUTE */}\n            <Route path=\"/playlist-index\" render={(props) =>      <PlaylistIndex {...props} currentUser =     {this.state.loggedInUser} /> } />\n            {/* above says, at this url, render props from the      PlaylistIndex component for the currentUser who's     session is currently running. */}\n            {/* passing in {this.state.loggedInUser}, ANYTIME the user in the app component changes, it will changge in this specified component as well. Important to keep user's state consistent across the app's functionality. */}\n\n            {/* SINGLE PLAYLIST ROUTE */}\n            <Route path=\"/playlist/:id\" component = {SinglePlaylist}  />\n            {/*                     || */}\n            {/*                      ---------------------------------*/}\n            {/* in the SinglePlaylist component, we will have access || to whatever is in the url inside    this.props.match.params.id*/}\n            {/* a component is capable of automatically adding in history, location, several elements from the DOM, that enables usage in other components, so a good way to enable that is use component = {component.name} */}\n            {/* the parent for these components is Switch, the App component is SinglePlaylist and PlaylistIndex's grandparents. */}\n            {/* in SinglePlaylist component, we have access to whatever is inside the url, inside this.props.match.params.id. */}\n\n            {/* ALL ALBUMLISTS ROUTE */}\n            <Route path=\"/albumlist-index\" render={(props) =>         <AlbumlistIndex {...props} currentUser =        {this.state.loggedInUser} /> } />\n            {/* above says, at this url, render props from the      AlbumlistIndex component for the currentUser who's      session is currently running. */}\n\n            {/* SINGLE ALBUMLIST ROUTE */}\n            <Route path=\"/albumlist/:id\" component = {SingleAlbumlist} />\n\n            {/* SIGNUP ROUTE */}\n            <Route path=\"/signup\" render = {(props) => <Signup {...props} logTheUserIntoAppComponent = {this.logInTheUser} /> } />\n            {/* what is logTheUserIntoAppComponent =????? */}\n{/* should set the state in the app component to keep app state consistent for the user. */}\n\n\n            {/* LOGIN ROUTE */}\n            <Route path=\"/login\" render = {(props) => <Login {...props} logTheUserIntoAppComponent = {this.logInTheUser} /> } />\n{/* what is logTheUserIntoAppComponent =????? */}\n\n\n{/* // BELOW - TRYING TO FIX THE REACT ERROR */}\n            {/* NEW PLAYLIST ROUTE */}\n            <Route path=\"/playlist-new\" render={(props) =>         <newPlaylist {...props} currentUser =        {this.state.loggedInUser} /> } />\n            {/* above says, at this url, render props from the      NewPlaylist component for the currentUser who's      session is currently running. */}\n\n            \n            {/* NEWALBUMLIST ROUTE */}\n            <Route path=\"/albumlist-index\" render={(props) =>         <newAlbumlist {...props} currentUser =        {this.state.loggedInUser} /> } />\n            {/* above says, at this url, render props from the      NewAlbumlist component for the currentUser who's      session is currently running. */}\n\n\n\n        </Switch>\n\n      <PlaylistIndex />\n\n\n  </div>\n\n    );\n  }\n}\n\nexport default App;\n\n// ROUTES IN REACT are if statements, remember that.\n\n// Be 100% certain that all components have user information in the same class, so it is never changed or altered while a user travels through my app.\n\n{/* what is logTheUserIntoAppComponent =????? */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\n\n<BrowserRouter>\n    <App />\n</BrowserRouter>,\n\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}